# -*- coding: utf-8 -*-
"""week15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-MwH1o64FbUQcS73uoc90RqPndFmyPR5
"""

from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir('drive/My Drive/dataset/RNN_test')

!ls



'''
SimpleRNN Example:
https://machinelearningmastery.com/time-series-forecasting-long-short-term-memory-network-python/
'''
from pandas import DataFrame
from pandas import Series
from pandas import concat
from pandas import read_csv
from pandas import datetime
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import SimpleRNN
from math import sqrt
from matplotlib import pyplot
import numpy

# date-time parsing function for loading the dataset
def parser(x):
	return datetime.strptime('190'+x, '%Y-%m')

# frame a sequence as a supervised learning problem
def timeseries_to_supervised(data, lag=1):
	df = DataFrame(data)
	columns = [df.shift(i) for i in range(1, lag+1)]
	columns.append(df)
	df = concat(columns, axis=1)
	df.fillna(0, inplace=True)
	return df

# create a differenced series
def difference(dataset, interval=1):
	diff = list()
	for i in range(interval, len(dataset)):
		value = dataset[i] - dataset[i - interval]
		diff.append(value)
	return Series(diff)

# invert differenced value
def inverse_difference(history, yhat, interval=1):
	return yhat + history[-interval]

# scale train and test data to [-1, 1]
def scale(train, test):
	# fit scaler
	scaler = MinMaxScaler(feature_range=(-1, 1))
	scaler = scaler.fit(train)
	# transform train
	train = train.reshape(train.shape[0], train.shape[1])
	train_scaled = scaler.transform(train)
	# transform test
	test = test.reshape(test.shape[0], test.shape[1])
	test_scaled = scaler.transform(test)
	return scaler, train_scaled, test_scaled

# inverse scaling for a forecasted value
def invert_scale(scaler, X, value):
	new_row = [x for x in X] + [value]
	array = numpy.array(new_row)
	array = array.reshape(1, len(array))
	inverted = scaler.inverse_transform(array)
	return inverted[0, -1]

# fit an RNN network to training data
def fit_rnn(train, batch_size, nb_epoch, neurons):
	X, y = train[:, 0:-1], train[:, -1] #get the train data and label data, respectively
	X = X.reshape(X.shape[0], 1, X.shape[1]) #of shape (Samples, Time Steps, data)
	model = Sequential()
	model.add(SimpleRNN(neurons, batch_input_shape=(batch_size, X.shape[1], X.shape[2]), stateful=True))
	model.add(Dense(1))
	model.compile(loss='mean_squared_error', optimizer='adam')
	for i in range(nb_epoch):
		model.fit(X, y, epochs=1, batch_size=batch_size, verbose=0, shuffle=False)
		model.reset_states() #reset States at every epoch
	print(model.summary())
	return model

# make a one-step forecast
def forecast(model, batch_size, X):
	X = X.reshape(1, 1, len(X))
	yhat = model.predict(X, batch_size=batch_size)
	return yhat[0,0]

# load dataset
series = read_csv('shampoo-sales.csv', header=0, parse_dates=[0], index_col=0, squeeze=True, date_parser=parser)

# transform data to be stationary
# there is an increasing trend in the data!
# A standard way to remove a trend is by differencing the data
raw_values = series.values
diff_values = difference(raw_values, 1) # data[i+1] - data[i]

# transform data to be supervised learning
supervised = timeseries_to_supervised(diff_values, 1)
supervised_values = supervised.values

# split data into train and test-sets
train, test = supervised_values[0:-12], supervised_values[-12:]

# transform the scale of the data
# RNNs expect data to be within the scale of the activation function used by the network.
# The default activation function for RNNs is the hyperbolic tangent (tanh), which outputs values between -1 and 1.
# This is the preferred range for the time series data.
scaler, train_scaled, test_scaled = scale(train, test)

import csv
file = open('rmse.csv', 'w+', newline ='') 

neurons_list = [4,8,16,32,64,128,256,512,1024]
batch_list = [1]
rmse_list =[]
for n in neurons_list:
  for b in batch_list:

    # fit (training) the model
    model = fit_rnn(train_scaled, b, 3000, n) # traindata, batch_size 1, nb_epoch 3000, neurons 4

    # forecast the entire training dataset to build up state for forecasting
    # Next, we will look at how we can use a fit RNN model to make a one-step forecast.
    # The fixed approach: fit the model once on all of the training data, then predict each new time step one at a time from the test data
    # The dynamic approach: re-fit the model or update the model each time step of the test data as new observations from the test data are made available
    train_reshaped = train_scaled[:, 0].reshape(len(train_scaled), 1, 1)
    model.predict(train_reshaped, batch_size=1)

    # walk-forward validation on the test data
    predictions = list()
    for i in range(len(test_scaled)):
      # make one-step forecast
      X, y = test_scaled[i, 0:-1], test_scaled[i, -1]
      yhat = forecast(model, 1, X)
      # invert scaling
      yhat = invert_scale(scaler, X, yhat)
      # invert differencing
      yhat = inverse_difference(raw_values, yhat, len(test_scaled)+1-i)
      # store forecast
      predictions.append(yhat)
      expected = raw_values[len(train) + i + 1]
      print('Month=%d, Predicted=%f, Expected=%f' % (i+1, yhat, expected))

    # report performance
    rmse = sqrt(mean_squared_error(raw_values[-12:], predictions))
    rmse_list.append(rmse)
    print('Test RMSE: %.3f' % rmse)
    # line plot of observed vs predicted
    pyplot.plot(raw_values[-12:])
    pyplot.plot(predictions)
    pyplot.savefig('b('+str(b)+')n('+str(n)+').jpg')
    pyplot.show()
    

with file:     
    write = csv.writer(file) 
    write.writerows(rmse_list)

print(rmse_list)

import pandas as pd
c={
    'rmse':rmse_list
}
data=DataFrame(c)#将字典转换成为数据框
data.to_csv('rmse.csv')

data